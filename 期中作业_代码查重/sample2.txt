#include<iostream>
using namespace std;
class Sqlist
{
public:
	int *elem;
	int length;//数组空间
	int len;//当前数组的长度
	Sqlist(int size = 0)
	{//构造一个空的顺序表L
		elem = new int[size];
		if (!elem)exit(OVERFLOW);
		length = size;
		len = 0;
	}
	void WriteElem(int n)
	{
		int i = 0;
		if (len < length)
		{
			elem[len] = n;
			len++;
		}
		else
		{
			cout << "数组容量不足，进行扩容" << endl;
			enlarge();
			elem[len] = n;
			len++;
		}
	}
	void enlarge()
	{
		int *p = new int[4 * length];
		for (int i = 0; i < length; i++)
		{
			p[i] = elem[i];
		}
		elem = p;
		length *= 4;
		cout << "已扩容,此时数组长度为:" << length << endl;
	}
	void shrink()
	{
		int *p = new int[length / 2];
		if (len < length / 4)
		{
			for (int i = 0; i < length / 2; i++)
			{
				p[i] = elem[i];
			}
			elem = p;
			delete p;
			length /= 2;
			cout << endl << "已缩容,此时数组长度为:" << length << endl;
		}
	}
	void GetElem(int i)
	{//按位置搜索
		if (i<1 || i>len)
			cout << "输入错误" << endl;
		cout << i << "位置上的数为" << elem[i - 1] << endl;
	}
	void LocateElem(int e)
	{//在顺序表L中查找值为e的数据元素，返回其序号
		for (int i = 0; i < len; i++)
		{
			if (elem[i] == e)
				cout << e << "所在的位置是" << i + 1 << endl;
		}
	}
	int ListInsert(int i, int e)
	{//在顺序表L中第i个位置插入新的元素e,i值的合法范围是1<=i<=L.length+1
		if ((i < 1) || (i > len + 1))return 0;//i值不合法
		if (len + 1 > length)enlarge();
		for (int j = len - 1; j >= i - 1; j--)
			elem[j + 1] = elem[j];
		elem[i - 1] = e;
		++len;
		cout << "插入后数组如下：";
		for (int k = 0; k < len; k++)
		{
			cout << elem[k] << " ";
		}
		cout << endl;
		return 1;
	}
	int ListDelete(int i)
	{//在顺序表L中删除第i个元素，i值的合法范围是1<=i<=L.length
		if ((i < 1) || (i > len))return 0;
		for (int j = i; j <= len - 1; j++)
			elem[j - 1] = elem[j];
		--len;
		cout << "删除后数组如下：";
		for (int k = 0; k < len; k++)
		{
			cout << elem[k] << " ";
		}
		cout << endl;
		return 1;
	}
	void LocateDelete(int i, int m)
	{//按位置修改数据
		if ((i < 1) || (i > len))cout << "输入错误" << endl;
		elem[i - 1] = m;
		cout << "修改数据后数组如下：" ;
		for (int k = 0; k < len; k++)
		{
			cout << elem[k] << " ";
		}
		cout << endl;
	}
	void GetDelete(int e, int m)
	{//按值修改数据
		for (int i = 0; i < len; i++)
		{
			if (elem[i] == e)
				elem[i] = m;
		}
		cout << "修改数据后数组如下：" ;
		for (int k = 0; k < len; k++)
		{
		cout << elem[k] << " ";
		}
		cout << endl;
	}
};

int main()
{
	int size, a, n;
	cout << "输入数组的长度:";
	cin >> size;
	cout << endl << "输入要输入的数的个数：";
	cin >> n;
	Sqlist Array(size);
	for (int i = 0; i < n; i++)
	{
		cin >> a;
		Array.WriteElem(a);
	}
	int a1, a2, a3, a4, a5, a6, a7, a8, a9;
	cout << endl;
	cout << "输入要查找的位置：";
	cin >> a1;
	Array.GetElem(a1);

	cout << endl << "输入要查找的数：";
	cin >> a2;
	Array.LocateElem(a2);

	cout << endl << "输入要插入的数的位置：";
	cin >> a3;
	cout << "输入要插入的数：";
	cin >> a4;
	Array.ListInsert(a3, a4);

	int T = 4;
	while (T--)
	{
		cout << endl << "输入要删除的数的位置是：";
		cin >> a5;
		Array.ListDelete(a5);
	}

	cout << endl << "输入要修改的数据的位置是:";
	cin >> a6;
	cout << "输入要修改该位置的数为：";
	cin >> a7;
	Array.LocateDelete(a6, a7);

	cout << endl << "输入要修改的数据：";
	cin >> a8;
	cout << "修改为：";
	cin >> a9;
	Array.GetDelete(a8, a9);
	
	Array.shrink();
	return 0;
}